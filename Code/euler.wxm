/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 15.04.0 ] */

/* [wxMaxima: title   start ]
MÉTODO DE EULER
   [wxMaxima: title   end   ] */

/* [wxMaxima: input   start ] */
numer:true;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Resolución de PVI con el método de Euler
   [wxMaxima: section end   ] */

/* [wxMaxima: comment start ]
Método con criterio de parada: número de iteraciones
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
MetodoEuler(a, b, N, y0, g) := block(
    h: (b-a)/N,
    ti: a,
    approx: makelist(0,N+1),
    approx[1]: [ti,y0],
    for i:1 thru N do(
       approx[i+1]: [ti+h, approx[i][2] + h*g(ti,approx[i][2])],
       ti: ti+h
    ),
    return(approx)
);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
f(t,y):=float(-4*t^3*y^2);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
l1: MetodoEuler(-10,0,100,1/10001,f)$
l1[101];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
l2:MetodoEuler(-10,0,1000,1/10001,f)$
l2[1001];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
l3:MetodoEuler(-10,0,5000,1/10001,f)$
l3[5001];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
l4:MetodoEuler(-10,0,7500,1/10001,f)$
l4[7501];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
l5:MetodoEuler(-10,0,10000,1/10001,f)$
l5[10001];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
sol(t):= 1 / (1 + t^4);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
wxplot2d([[discrete,l1], [discrete,l2], [discrete,l3], [discrete,l4], [discrete,l5], sol(t)], [t,-10,0],
        [style, [lines,2,1], [lines,2,2], [lines,2,3], [lines,2,4], [lines,2,5], [lines,2,6]],
        [legend, "n=100","n=1000", "n=5000", "n=7500","n=10000", "y"], [ylabel, "y(t)"]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Ejercicio 1: Aplicar el método de Euler para aproximar la solución del problema de valor inicial y(0)=-3
d(y)/d(t) = t + (1/5)y en el intervalo [0,5] con tamaño de peso h=1, h=0.8 y h=0.6.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
kill(y,t)$
g:t+y*(1/5);
a:0$
b:5$
y0:-3$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
h0:1$
aprox:MetodoEulerH(a,b,h0,y0,g)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
h1:0.8$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
aprox:MetodoEulerH(a,b,h1,y0,g)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
h2:0.6$
aprox:MetodoEulerH(a,b,h2,y0,g)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Ejercicio 2: Aplicar el método de Euler para aproximar la solución del problema de valor inicial
d(y)/d(t) = -ty en el intervalo [0,2] con tamaño de peso h=1, h=0.4 y h=0.2.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
kill(y,t)$
f:-t*y$
a:0$
b:2$
y0:1$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
h0:0.2$
aprox:MetodoEulerH(a,b,h0,y0,f)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
h1:0.4$
aprox:MetodoEulerH(a,b,h1,y0,f)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
h2:0.8$
aprox:MetodoEulerH(a,b,h2,y0,f)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Errores reales y cotas de error
   [wxMaxima: section end   ] */

/* [wxMaxima: comment start ]
Dada la ecuación diferencial y su solución
    y'=-ty ^ y(t)=exp(-t²/2).
Resuélvase empleando el método de Euler con el valor inicial y(0)=1 en el intervalo [0,0.4] y con el 
tamaño de paso h=0.2, y compara los errores reales cometidos en la aproximación con las cotas teóricas.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
/* Valores exactos */
solucionExacta(a,b,h,y):=block(
    define(y(t), y),
    n:(b-a)/h,
    exactas:makelist(0,n+1),
    exactas[1]:y0,
    for i:1 thru n do(
        t:a+i*h, /*calcule ti*/
        exactas[i+1]:y(t),
        print(t, " |  ",exactas[i+1])
    ), 
    
    return(exactas)
)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* Errores de las sucesivas aproximaciones */
erroresAprox(aprox, exac, a, b):=block(
    n:length(aprox)-1,
    h:(b-a)/n,
    errores:makelist(0,n),
    
    for i:2 thru n+1 do(
        errores[i-1]:abs(aprox[i]-exac[i]),
        t:a+(i-1)*h,
        print(t, " |  ",errores[i-1])
    ), 
    
    return(errores)
)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
kill(t)$
y(t):=exp(-t^2/2)$
define(d2y(t), diff(y(t), t, 2))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
a:0$
b:0.4$
wxplot2d([d2y(t)],[t,a,b])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
cotasError(a, b, h, E):=block(
    n:(b-a)/h,
    cotas:makelist(0,n),
    /* |y''(t)|<=M, para todo a<=t<=b ~ existe E: M=máx|y''(E)|*/
    M:abs(d2y(E)),
    
    /* Condición de Lipschitz: |f(t, y1)-f(t, y2)|=|-t*y1 - (-t*y2)|=|-t(y1-y2)|=|-t|*|y1-y2|<=máx{|a|,|t_n|}*|y1-y2| => L=máx{|a|,|t_n|} */
    for i:1 thru n do(
        t:a+i*h,
        L:max(abs(a), abs(t)),
        
        cotas[i]:float( h*M/(2*L)*(exp(L*(t-a))-1) ),
        print(t, " |  ",cotas[i])
    ),
    return(cotas)
)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
kill(y,t)$
g:-t*y$
a:0$
b:0.4$
y0:1$

print("Aproximaciones método de Euler")$
h:0.2$
aprox:MetodoEulerH(a,b,h,y0,g)$ /* Aproximaciones del método de Euler */

kill(y,t)$
y:exp(-t^2/2)$
print("Valores exactos")$
exac:solucionExacta(a,b,h,y)$ /* Valores exactos */

print("Errores de las sucesivas aproximaciones")$
erroresAprox(aprox, exac, a, b)$ /* Errores de las sucesivas aproximaciones */

/* COTA DEL ERROR */ 
print("Cotas sucesivas del error")$
cotasError(a, b, h, a)$
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$
